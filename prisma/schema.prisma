// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Estados utilizados en sectores y tareas
enum Status {
  pendiente
  en_proceso
  completado
}

/// Tipos de sector
enum SectorType {
  Poda
  Corte_de_pasto
}

model Sector {
  id            String   @id @default(cuid())
  name          String
  type          SectorType
  status        Status
  /// Polígono de coordenadas en formato [{ lat: number, lng: number }, ...]
  path          Json
  direccion     String?
  observaciones String?

  tasks         Task[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Worker {
  id            String   @id @default(cuid())
  name          String
  observaciones String?

  tasks         Task[]   @relation("TaskAssignedWorker")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Task {
  id                  String    @id @default(cuid())
  // Relación con Sector
  sectorId            String
  sector              Sector    @relation(fields: [sectorId], references: [id])
  // Denormalizado para compatibilidad con la UI actual
  sectorName          String

  type                String
  status              Status

  // Fechas (se mapearán a strings YYYY-MM-DD en la capa de servicios)
  startDate           DateTime
  endDate             DateTime?

  // Relación con Worker
  assignedWorkerId    String
  assignedWorker      Worker    @relation("TaskAssignedWorker", fields: [assignedWorkerId], references: [id])
  // Denormalizado para compatibilidad con la UI actual
  assignedWorkerName  String

  observations        String?

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Historial
  histories           TaskHistory[]

  @@index([sectorId])
  @@index([assignedWorkerId])
}

/// Historial/auditoría de cambios de Tareas
enum TaskEventType {
  Created
  Started
  Finished
  Reassigned
  Updated
  Reset
}

model TaskHistory {
  id         String        @id @default(cuid())
  taskId     String
  task       Task          @relation(fields: [taskId], references: [id])
  eventType  TaskEventType
  message    String
  createdAt  DateTime      @default(now())

  @@index([taskId])
}

/// Enums para Arbolado
enum SidewalkSide {
  Norte
  Sur
  Este
  Oeste
  Ambas
  Ninguna
}

enum GeneralStatus {
  Bueno
  Regular
  Malo
  Necesita_Intervencion
}

enum TreeStatus {
  Sano
  Enfermo
  Necesita_Poda
  Seco
  Recien_Plantado
  Malo
}

/// Secciones de calles con arbolado
model StreetSection {
  id                 String         @id @default(cuid())
  streetName         String
  addressRange       String
  sidewalkSide       SidewalkSide
  predominantSpecies String
  treeCount          Int
  generalStatus      GeneralStatus

  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

/// Árboles individuales
model Tree {
  id               String       @id @default(cuid())
  species          String
  status           TreeStatus
  streetName       String
  streetNumber     String
  sidewalk         SidewalkSide?
  location         Json?
  plantingDate     DateTime?
  lastPruningDate  DateTime?
  observations     String?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}
